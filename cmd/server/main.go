package main

// @title          Event Center API
// @version        1.0
// @description    This is the API documentation for the Event Center service.
// @termsOfService http://swagger.io/terms/

// @contact.name   API Support
// @contact.url    http://www.swagger.io/support
// @contact.email  support@swagger.io

// @license.name   Apache 2.0
// @license.url    http://www.apache.org/licenses/LICENSE-2.0.html

// @host           localhost:8080
// @BasePath       /api/v1

import (
	"context"
	"fmt"
	"os"
	"os/signal"
	"syscall"
	"time"

	"go.uber.org/zap"

	"notification/internal/application/channel/usecases"
	templateusecases "notification/internal/application/template/usecases"
	messageusecases "notification/internal/application/message/usecases"
	"notification/internal/application/cqrs"
	channelcqrs "notification/internal/application/cqrs/channel"
	templatecqrs "notification/internal/application/cqrs/template"
	messagecqrs "notification/internal/application/cqrs/message"
	"notification/internal/domain/services"
	"notification/internal/infrastructure/external"
	"notification/internal/infrastructure/messaging"
	"notification/internal/infrastructure/repository"
	"notification/internal/presentation"
	"notification/internal/presentation/http/handlers"
	"notification/internal/presentation/http/middleware"
	natshandlers "notification/internal/presentation/nats/handlers"
	"notification/pkg/config"
	"notification/pkg/database"
	"notification/pkg/logger"

	// swagger related imports
	_ "notification/docs" // docs is generated by Swag CLI
)

func main() {
	// Load configuration
	cfg, err := config.Load()
	if err != nil {
		fmt.Printf("Failed to load configuration: %v\n", err)
		os.Exit(1)
	}

	// Initialize logger
	if err := logger.InitGlobalLogger(&cfg.Logger); err != nil {
		fmt.Printf("Failed to initialize logger: %v\n", err)
		os.Exit(1)
	}
	log := logger.GetGlobalLogger()

	log.Info("Starting Notification server",
		zap.String("version", "1.0.0"),
		zap.String("server_address", cfg.GetServerAddress()))

	// Initialize database
	db, err := database.NewPostgresDB(&cfg.Database)
	if err != nil {
		log.Fatal("Failed to connect to database", zap.Error(err))
	}
	defer db.Close()

	log.Info("Database connected successfully",
		zap.String("host", cfg.Database.Host),
		zap.Int("port", cfg.Database.Port),
		zap.String("database", cfg.Database.DBName))

	// Run database migrations
	// if err := db.RunMigrations("./migrations"); err != nil {
	if err := db.RunMigrations("../../migrations"); err != nil {
		log.Fatal("Failed to run database migrations", zap.Error(err))
	}
	log.Info("Database migrations completed successfully")

	// Initialize NATS client
	natsClient, err := messaging.NewNATSClient(&cfg.NATS, log)
	if err != nil {
		log.Fatal("Failed to connect to NATS", zap.Error(err))
	}
	defer natsClient.Close()

	log.Info("NATS connected successfully", zap.String("url", cfg.NATS.URL))

	// Build dependency container
	container := buildContainer(db, natsClient, log, cfg)

	// Initialize HTTP handlers (both traditional and CQRS)
	channelHandler := handlers.NewChannelHandler(
		container.CreateChannelUseCase,
		container.GetChannelUseCase,
		container.ListChannelsUseCase,
		container.UpdateChannelUseCase,
		container.DeleteChannelUseCase,
	)

	// Initialize template HTTP handler
	templateHandler := handlers.NewTemplateHandler(
		container.CreateTemplateUseCase,
		container.GetTemplateUseCase,
		container.ListTemplatesUseCase,
		container.UpdateTemplateUseCase,
		container.DeleteTemplateUseCase,
	)

	// Initialize message HTTP handler
	messageHandler := handlers.NewMessageHandler(
		container.SendMessageUseCase,
		container.GetMessageUseCase,
	)

	// Initialize CQRS HTTP handlers
	cqrsChannelHandler := handlers.NewCQRSChannelHandler(container.CQRSFacade)
	cqrsTemplateHandler := handlers.NewCQRSTemplateHandler(container.CQRSFacade)
	cqrsMessageHandler := handlers.NewCQRSMessageHandler(container.CQRSFacade)

	// Initialize NATS handler manager (traditional)
	natsHandlerConfig := &natshandlers.HandlerConfig{
		NATSConn:              natsClient.GetConnection(),
		CreateChannelUseCase:  container.CreateChannelUseCase,
		GetChannelUseCase:     container.GetChannelUseCase,
		ListChannelsUseCase:   container.ListChannelsUseCase,
		UpdateChannelUseCase:  container.UpdateChannelUseCase,
		DeleteChannelUseCase:  container.DeleteChannelUseCase,
		CreateTemplateUseCase: container.CreateTemplateUseCase,
		GetTemplateUseCase:    container.GetTemplateUseCase,
		ListTemplatesUseCase:  container.ListTemplatesUseCase,
		UpdateTemplateUseCase: container.UpdateTemplateUseCase,
		DeleteTemplateUseCase: container.DeleteTemplateUseCase,
		SendMessageUseCase:    container.SendMessageUseCase,
		GetMessageUseCase:     container.GetMessageUseCase,
		ListMessagesUseCase:   container.ListMessagesUseCase,
	}
	natsManager := natshandlers.NewHandlerManager(natsHandlerConfig)

	// Initialize CQRS NATS handler
	cqrsNatsHandler := natshandlers.NewCQRSChannelNATSHandler(container.CQRSFacade, natsClient.GetConnection())

	// Initialize middleware configuration based on environment
	var middlewareConfig *middleware.MiddlewareConfig
	// For now, use development config as default
	// TODO: Add Environment field to config.Config
	middlewareConfig = middleware.DevelopmentMiddlewareConfig()

	// Initialize presentation layer server
	serverConfig := &presentation.ServerConfig{
		HTTPPort:           fmt.Sprintf("%d", cfg.Server.Port),
		HTTPTimeout:        time.Duration(cfg.Server.ReadTimeout) * time.Second,
		ChannelHandler:     channelHandler,
		CQRSChannelHandler: cqrsChannelHandler,
		TemplateHandler:    templateHandler,
		MessageHandler:     messageHandler,
		CQRSTemplateHandler: cqrsTemplateHandler,
		CQRSMessageHandler:  cqrsMessageHandler,
		NATSManager:        natsManager,
		CQRSNATSHandler:    cqrsNatsHandler,
		MiddlewareConfig:   middlewareConfig,
	}
	server := presentation.NewServer(serverConfig)

	// Start the presentation layer server
	ctx := context.Background()
	if err := server.Start(ctx); err != nil {
		log.Fatal("Failed to start presentation layer server", zap.Error(err))
	}

	// Wait for interrupt signal
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit

	log.Info("Shutting down server...")

	// Graceful shutdown
	shutdownCtx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer cancel()

	if err := server.Stop(shutdownCtx); err != nil {
		log.Error("Server forced to shutdown", zap.Error(err))
	} else {
		log.Info("Server shutdown completed")
	}
}

// Container holds all application dependencies
type Container struct {
	// Repositories
	ChannelRepo  repository.ChannelRepositoryImpl
	TemplateRepo repository.TemplateRepositoryImpl
	MessageRepo  repository.MessageRepositoryImpl

	// Services
	MessageSender       *services.EnhancedMessageSender
	ChannelValidator    *services.ChannelValidator
	TemplateRenderer    *services.DefaultTemplateRenderer
	NotificationService *external.DefaultNotificationService

	// Use Cases - Channel
	CreateChannelUseCase *usecases.CreateChannelUseCase
	GetChannelUseCase    *usecases.GetChannelUseCase
	ListChannelsUseCase  *usecases.ListChannelsUseCase
	UpdateChannelUseCase *usecases.UpdateChannelUseCase
	DeleteChannelUseCase *usecases.DeleteChannelUseCase

	// Use Cases - Template
	CreateTemplateUseCase *templateusecases.CreateTemplateUseCase
	GetTemplateUseCase    *templateusecases.GetTemplateUseCase
	ListTemplatesUseCase  *templateusecases.ListTemplatesUseCase
	UpdateTemplateUseCase *templateusecases.UpdateTemplateUseCase
	DeleteTemplateUseCase *templateusecases.DeleteTemplateUseCase

	// Use Cases - Message
	SendMessageUseCase  *messageusecases.SendMessageUseCase
	GetMessageUseCase   *messageusecases.GetMessageUseCase
	ListMessagesUseCase *messageusecases.ListMessagesUseCase

	// CQRS Components
	CQRSManager *cqrs.CQRSManager
	CQRSFacade  *cqrs.CQRSFacade

	// Infrastructure
	NATSClient *messaging.NATSClient
	Logger     *logger.Logger
	Config     *config.Config
}

// buildContainer creates and wires all dependencies
func buildContainer(db *database.PostgresDB, natsClient *messaging.NATSClient, log *logger.Logger, cfg *config.Config) *Container {
	// Initialize repositories
	channelRepo := repository.NewChannelRepositoryImpl(db.DB)
	templateRepo := repository.NewTemplateRepositoryImpl(db.DB)
	messageRepo := repository.NewMessageRepositoryImpl(db.DB)

	// Initialize external services
	messageSenderFactory := external.NewDefaultMessageSenderFactory(30 * time.Second)
	notificationService := external.NewDefaultNotificationService(messageSenderFactory)
	notificationServiceAdapter := external.NewNotificationServiceAdapter(notificationService)

	// Initialize domain services
	templateRenderer := services.NewDefaultTemplateRenderer()
	channelValidator := services.NewChannelValidator(channelRepo, templateRepo)
	messageSender := services.NewEnhancedMessageSender(
		channelRepo,
		templateRepo,
		messageRepo,
		templateRenderer,
		notificationServiceAdapter,
		log,
	)

	// Initialize channel use cases
	createChannelUseCase := usecases.NewCreateChannelUseCase(channelRepo, templateRepo, channelValidator)
	getChannelUseCase := usecases.NewGetChannelUseCase(channelRepo)
	listChannelsUseCase := usecases.NewListChannelsUseCase(channelRepo)
	updateChannelUseCase := usecases.NewUpdateChannelUseCase(channelRepo, channelValidator)
	deleteChannelUseCase := usecases.NewDeleteChannelUseCase(channelRepo, channelValidator)

	// Initialize template use cases
	createTemplateUseCase := templateusecases.NewCreateTemplateUseCase(templateRepo)
	getTemplateUseCase := templateusecases.NewGetTemplateUseCase(templateRepo)
	listTemplatesUseCase := templateusecases.NewListTemplatesUseCase(templateRepo)
	updateTemplateUseCase := templateusecases.NewUpdateTemplateUseCase(templateRepo)
	deleteTemplateUseCase := templateusecases.NewDeleteTemplateUseCase(templateRepo)

	// Initialize message use cases
	sendMessageUseCase := messageusecases.NewSendMessageUseCase(messageRepo, channelRepo, templateRepo, messageSender)
	getMessageUseCase := messageusecases.NewGetMessageUseCase(messageRepo)
	listMessagesUseCase := messageusecases.NewListMessagesUseCase(messageRepo)

	// Initialize CQRS system
	cqrsManager := cqrs.NewCQRSManager()
	cqrsConfig := cqrs.DefaultCQRSConfig()
	cqrsFacade := cqrs.NewCQRSFacade(cqrsManager, cqrsConfig)

	// Initialize CQRS handlers
	channelCommandHandlers := channelcqrs.NewChannelCommandHandlers(
		createChannelUseCase,
		updateChannelUseCase,
		deleteChannelUseCase,
		cqrsManager.GetEventBus(),
	)

	channelQueryHandlers := channelcqrs.NewChannelQueryHandlers(
		getChannelUseCase,
		listChannelsUseCase,
	)

	// Register CQRS command handlers
	createCommandHandler := channelcqrs.NewCreateChannelCommandHandler(channelCommandHandlers)
	updateCommandHandler := channelcqrs.NewUpdateChannelCommandHandler(channelCommandHandlers)
	deleteCommandHandler := channelcqrs.NewDeleteChannelCommandHandler(channelCommandHandlers)

	if err := cqrsManager.RegisterCommandHandler(createCommandHandler); err != nil {
		log.Fatal("Failed to register create channel command handler", zap.Error(err))
	}
	if err := cqrsManager.RegisterCommandHandler(updateCommandHandler); err != nil {
		log.Fatal("Failed to register update channel command handler", zap.Error(err))
	}
	if err := cqrsManager.RegisterCommandHandler(deleteCommandHandler); err != nil {
		log.Fatal("Failed to register delete channel command handler", zap.Error(err))
	}

	// Register CQRS query handlers
	getQueryHandler := channelcqrs.NewGetChannelQueryHandler(channelQueryHandlers)
	listQueryHandler := channelcqrs.NewListChannelsQueryHandler(channelQueryHandlers)

	if err := cqrsManager.RegisterQueryHandler(getQueryHandler); err != nil {
		log.Fatal("Failed to register get channel query handler", zap.Error(err))
	}
	if err := cqrsManager.RegisterQueryHandler(listQueryHandler); err != nil {
		log.Fatal("Failed to register list channels query handler", zap.Error(err))
	}

	// Initialize template CQRS handlers
	templateCommandHandlers := templatecqrs.NewTemplateCommandHandlers(
		createTemplateUseCase,
		updateTemplateUseCase,
		deleteTemplateUseCase,
		cqrsManager.GetEventBus(),
	)

	templateQueryHandlers := templatecqrs.NewTemplateQueryHandlers(
		getTemplateUseCase,
		listTemplatesUseCase,
	)

	// Register template CQRS command handlers
	createTemplateCommandHandler := templatecqrs.NewCreateTemplateCommandHandler(templateCommandHandlers)
	updateTemplateCommandHandler := templatecqrs.NewUpdateTemplateCommandHandler(templateCommandHandlers)
	deleteTemplateCommandHandler := templatecqrs.NewDeleteTemplateCommandHandler(templateCommandHandlers)

	if err := cqrsManager.RegisterCommandHandler(createTemplateCommandHandler); err != nil {
		log.Fatal("Failed to register create template command handler", zap.Error(err))
	}
	if err := cqrsManager.RegisterCommandHandler(updateTemplateCommandHandler); err != nil {
		log.Fatal("Failed to register update template command handler", zap.Error(err))
	}
	if err := cqrsManager.RegisterCommandHandler(deleteTemplateCommandHandler); err != nil {
		log.Fatal("Failed to register delete template command handler", zap.Error(err))
	}

	// Register template CQRS query handlers
	getTemplateQueryHandler := templatecqrs.NewGetTemplateQueryHandler(templateQueryHandlers)
	listTemplatesQueryHandler := templatecqrs.NewListTemplatesQueryHandler(templateQueryHandlers)

	if err := cqrsManager.RegisterQueryHandler(getTemplateQueryHandler); err != nil {
		log.Fatal("Failed to register get template query handler", zap.Error(err))
	}
	if err := cqrsManager.RegisterQueryHandler(listTemplatesQueryHandler); err != nil {
		log.Fatal("Failed to register list templates query handler", zap.Error(err))
	}

	// Initialize message CQRS handlers
	messageCommandHandlers := messagecqrs.NewMessageCommandHandlers(
		sendMessageUseCase,
		cqrsManager.GetEventBus(),
	)

	messageQueryHandlers := messagecqrs.NewMessageQueryHandlers(
		getMessageUseCase,
		listMessagesUseCase,
	)

	// Register message CQRS command handlers
	sendMessageCommandHandler := messagecqrs.NewSendMessageCommandHandler(messageCommandHandlers)

	if err := cqrsManager.RegisterCommandHandler(sendMessageCommandHandler); err != nil {
		log.Fatal("Failed to register send message command handler", zap.Error(err))
	}

	// Register message CQRS query handlers
	getMessageQueryHandler := messagecqrs.NewGetMessageQueryHandler(messageQueryHandlers)
	listMessagesQueryHandler := messagecqrs.NewListMessagesQueryHandler(messageQueryHandlers)

	if err := cqrsManager.RegisterQueryHandler(getMessageQueryHandler); err != nil {
		log.Fatal("Failed to register get message query handler", zap.Error(err))
	}
	if err := cqrsManager.RegisterQueryHandler(listMessagesQueryHandler); err != nil {
		log.Fatal("Failed to register list messages query handler", zap.Error(err))
	}

	log.Info("CQRS handlers registered successfully")

	return &Container{
		// Repositories
		ChannelRepo:  *channelRepo,
		TemplateRepo: *templateRepo,
		MessageRepo:  *messageRepo,

		// Services
		MessageSender:       messageSender,
		ChannelValidator:    channelValidator,
		TemplateRenderer:    templateRenderer,
		NotificationService: notificationService,

		// Use Cases - Channel
		CreateChannelUseCase: createChannelUseCase,
		GetChannelUseCase:    getChannelUseCase,
		ListChannelsUseCase:  listChannelsUseCase,
		UpdateChannelUseCase: updateChannelUseCase,
		DeleteChannelUseCase: deleteChannelUseCase,

		// Use Cases - Template
		CreateTemplateUseCase: createTemplateUseCase,
		GetTemplateUseCase:    getTemplateUseCase,
		ListTemplatesUseCase:  listTemplatesUseCase,
		UpdateTemplateUseCase: updateTemplateUseCase,
		DeleteTemplateUseCase: deleteTemplateUseCase,

		// Use Cases - Message
		SendMessageUseCase:  sendMessageUseCase,
		GetMessageUseCase:   getMessageUseCase,
		ListMessagesUseCase: listMessagesUseCase,

		// CQRS Components
		CQRSManager: cqrsManager,
		CQRSFacade:  cqrsFacade,

		// Infrastructure
		NATSClient: natsClient,
		Logger:     log,
		Config:     cfg,
	}
}
